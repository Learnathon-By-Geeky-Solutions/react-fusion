generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(uuid())
  email      String        @unique
  password   String
  role       UserRole
  status     UserStatus    @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  Admin      Admin?
  Instructor Instructor?
  Student    Student?
  comments   Comment[]
  likes      LikeUser[]
  dislikes   DislikeUser[]
  notes      Note[]

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  userId        String   @unique
  name          String
  email         String   @unique
  image         String?
  contactNumber String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Instructor {
  id                  String             @id @default(uuid())
  userId              String             @unique
  name                String
  email               String             @unique
  experience          Int
  gender              Gender
  qualification       QualificationLevel
  currentWorkingPlace String
  designation         String
  image               String?
  contactNumber       String
  OTP                 String
  isDeleted           Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  courses Course[]
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("instructors")
}

model Student {
  id                 String             @id @default(uuid())
  userId             String             @unique
  name               String
  email              String             @unique
  gender             Gender
  qualification      QualificationLevel
  currentInstitution String
  image              String?
  contactNumber      String
  address            String
  OTP                String
  isDeleted          Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  User         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses      CourseStudent[]
  transactions Transactions[]

  @@map("students")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum UserStatus {
  BLOCKED
  ACTIVE
  PENDING
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

enum QualificationLevel {
  HIGH_SCHOOL
  BACHELORS
  MASTERS
  PHD
}

model Course {
  id           String          @id @default(uuid())
  title        String
  description  String
  rating       Float?
  price        Float
  thumbnail    String
  instructorId String
  instructor   Instructor      @relation(fields: [instructorId], references: [userId])
  milestones   Milestone[]
  students     CourseStudent[]
  transactions Transactions[]
}

model Milestone {
  id          String   @id @default(uuid())
  title       String
  description String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  modules     Module[]
}

model Module {
  id          String    @id @default(uuid())
  title       String
  description String
  milestoneId String
  milestone   Milestone @relation(fields: [milestoneId], references: [id])
  videos      Video[]
  quizes      Quiz[]
}

model Quiz {
  id        String     @id @default(uuid())
  moduleId  String
  module    Module     @relation(fields: [moduleId], references: [id])
  questions Question[]
}

model Question {
  id       String   @id @default(uuid())
  quizId   String
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  question String
  options  String[]
  answer   String
  points   Float
}

model Video {
  id           String        @id @default(uuid())
  moduleId     String
  module       Module        @relation(fields: [moduleId], references: [id])
  title        String
  url          String
  isDeleted    Boolean       @default(false)
  comments     Comment[]
  notes        Note[]
  likeCount    Int
  likes        LikeUser[]
  dislikeCount Int
  dislike      DislikeUser[]
}

model Comment {
  id      String @id @default(uuid())
  videoId String
  video   Video  @relation(fields: [videoId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  comment String
  //TODO: DESIGN REPLY RELATION
}

model LikeUser {
  videoId String
  video   Video  @relation(fields: [videoId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@id([videoId, userId])
}

model DislikeUser {
  videoId String
  video   Video  @relation(fields: [videoId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@id([videoId, userId])
}

model Note {
  id      String @id @default(uuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  videoId String
  video   Video  @relation(fields: [videoId], references: [id])
  note    String

  @@unique([userId, videoId])
}

model CourseStudent {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  @@id([courseId, studentId])
}

model Transactions {
  id        String  @id @default(uuid())
  txnId     String  @unique
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [userId])
}
