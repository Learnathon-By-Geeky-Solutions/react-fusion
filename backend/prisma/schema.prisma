generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  password   String
  role       UserRole
  status     UserStatus  @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Admin      Admin?
  Instructor Instructor?
  Student    Student?
  comments   Comment[]

  OTP       String
  isDeleted Boolean @default(false)

  @@map("users")
}

model Admin {
  id            String  @id @default(uuid())
  userId        String  @unique
  name          String
  email         String  @unique
  image         String?
  contactNumber String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Instructor {
  id                  String             @id @default(uuid())
  userId              String             @unique
  name                String
  email               String             @unique
  experience          Int
  gender              Gender
  qualification       QualificationLevel
  currentWorkingPlace String
  designation         String
  image               String?
  contactNumber       String

  courses            Course[]
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  InstructorFeedback InstructorFeedback[]

  @@map("instructors")
}

model Student {
  id                 String             @id @default(uuid())
  userId             String             @unique
  name               String
  email              String             @unique
  gender             Gender
  qualification      QualificationLevel
  currentInstitution String
  image              String?
  contactNumber      String
  address            String

  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes              LikeUser[]
  dislikes           DislikeUser[]
  notes              Note[]
  courses            CourseStudent[]
  transactions       Transactions[]
  StudentAnalytics   StudentAnalytics?
  CourseProgress     CourseProgress[]
  InstructorFeedback InstructorFeedback[]

  @@map("students")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum UserStatus {
  BLOCKED
  ACTIVE
  PENDING
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

enum QualificationLevel {
  HIGH_SCHOOL
  BACHELORS
  MASTERS
  PHD
}

model Course {
  id             String           @id @default(uuid())
  title          String
  description    String
  rating         Float?
  price          Float
  thumbnail      String
  instructorId   String
  instructor     Instructor       @relation(fields: [instructorId], references: [userId])
  isPublished    Boolean          @default(false)
  isDeleted      Boolean          @default(false)
  milestones     Milestone[]
  students       CourseStudent[]
  transactions   Transactions[]
  CourseProgress CourseProgress[]
}

model Milestone {
  id                String              @id @default(uuid())
  title             String
  description       String
  courseId          String
  course            Course              @relation(fields: [courseId], references: [id])
  modules           Module[]
  MilestoneProgress MilestoneProgress[]
}

model Module {
  id             String           @id @default(uuid())
  title          String
  description    String
  milestoneId    String
  milestone      Milestone        @relation(fields: [milestoneId], references: [id])
  ModuleProgress ModuleProgress[]
  moduleItems    ModuleItem[]
}

model ModuleItem {
  id       String @id @default(uuid())
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id])
  order    Int
  video    Video?
  quiz     Quiz?

  @@unique([moduleId, order])
}

model Quiz {
  id           String         @id @default(uuid())
  questions    Question[]
  QuizProgress QuizProgress[]
  moudleItemId String         @unique
  moduleItem   ModuleItem?    @relation(fields: [moudleItemId], references: [id])
}

model Question {
  id       String   @id @default(uuid())
  quizId   String
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  question String
  options  String[]
  answer   String
  points   Float
}

model Video {
  id            String          @id @default(uuid())
  title         String
  url           String
  length        Float // Length in seconds
  isDeleted     Boolean         @default(false)
  comments      Comment[]
  notes         Note[]
  likeCount     Int             @default(0)
  likes         LikeUser[]
  dislikeCount  Int             @default(0)
  dislike       DislikeUser[]
  VideoProgress VideoProgress[]

  moudleItemId String      @unique
  moduleItem   ModuleItem? @relation(fields: [moudleItemId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comment   String
  createdAt DateTime @default(now())
}

model LikeUser {
  videoId String
  video   Video   @relation(fields: [videoId], references: [id])
  userId  String
  user    Student @relation(fields: [userId], references: [userId])

  @@id([videoId, userId])
}

model DislikeUser {
  videoId String
  video   Video   @relation(fields: [videoId], references: [id])
  userId  String
  user    Student @relation(fields: [userId], references: [userId])

  @@id([videoId, userId])
}

model Note {
  id      String  @id @default(uuid())
  userId  String
  user    Student @relation(fields: [userId], references: [id])
  videoId String
  video   Video   @relation(fields: [videoId], references: [id])
  note    String

  @@unique([userId, videoId])
}

model CourseStudent {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [userId])

  @@id([courseId, studentId])
}

model Transactions {
  id        String  @id @default(uuid())
  txnId     String  @unique
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [userId])

  @@unique([courseId, studentId])
}

model StudentAnalytics {
  id              String  @id @default(uuid())
  studentId       String  @unique
  student         Student @relation(fields: [studentId], references: [userId])
  courseCompleted Int
  totalTimeSpent  Float
  progress        Float

  @@map("student_analytics")
}

model CourseProgress {
  id                String              @id @default(uuid())
  studentId         String
  student           Student             @relation(fields: [studentId], references: [userId])
  courseId          String
  course            Course              @relation(fields: [courseId], references: [id])
  isCompleted       Boolean             @default(false)
  progress          Float // Overall progress in the course (calculated)
  lastUpdated       DateTime            @default(now())
  VideoProgress     VideoProgress[]
  QuizProgress      QuizProgress[]
  ModuleProgress    ModuleProgress[]
  MilestoneProgress MilestoneProgress[]

  @@unique([studentId, courseId])
  @@map("course_progress")
}

model VideoProgress {
  id               String         @id @default(uuid())
  courseProgressId String
  courseProgress   CourseProgress @relation(fields: [courseProgressId], references: [id])
  videoId          String
  video            Video          @relation(fields: [videoId], references: [id])
  isCompleted      Boolean // Whether the student has completed watching the video
  timeWatched      Float // Time watched in seconds (if partial progress is tracked)
  lastUpdated      DateTime       @default(now())

  @@unique([courseProgressId, videoId])
  @@map("video_progress")
}

model QuizProgress {
  id               String         @id @default(uuid())
  courseProgressId String
  courseProgress   CourseProgress @relation(fields: [courseProgressId], references: [id])
  quizId           String
  quiz             Quiz           @relation(fields: [quizId], references: [id])
  isCompleted      Boolean // Whether the student has completed the quiz
  score            Float // Score obtained on the quiz
  lastUpdated      DateTime       @default(now())

  @@unique([courseProgressId, quizId])
  @@map("quiz_progress")
}

model ModuleProgress {
  id               String         @id @default(uuid())
  courseProgressId String
  courseProgress   CourseProgress @relation(fields: [courseProgressId], references: [id])
  moduleId         String
  module           Module         @relation(fields: [moduleId], references: [id])
  isCompleted      Boolean // Whether the student has completed the module
  lastUpdated      DateTime       @default(now())

  @@unique([courseProgressId, moduleId])
  @@map("module_progress")
}

model MilestoneProgress {
  id               String         @id @default(uuid())
  courseProgressId String
  courseProgress   CourseProgress @relation(fields: [courseProgressId], references: [id])
  milestoneId      String
  milestone        Milestone      @relation(fields: [milestoneId], references: [id])
  isCompleted      Boolean // Whether the student has completed the milestone
  lastUpdated      DateTime       @default(now())

  @@unique([courseProgressId, milestoneId])
  @@map("milestone_progress")
}

model InstructorFeedback {
  id           String     @id @default(uuid())
  instructorId String
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  studentId    String
  student      Student    @relation(fields: [studentId], references: [userId])
  feedback     String
  rating       Float // Rating given to the instructor
  createdAt    DateTime   @default(now())

  @@map("instructor_feedback")
}
